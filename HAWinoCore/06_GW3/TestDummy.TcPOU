<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TestDummy" Id="{9dd4ef7a-8a0f-4006-930a-8031bda32ef7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TestDummy
VAR
	sollPosX : LREAL := 6888;
	sollPosY : LREAL := 1344;
	sollPosTheta : LREAL := 0;
	newSollPosTheta : LREAL := 0;
	
	istPosX : LREAL := 0;
	istPosY : LREAL := 0;
	istPosTheta : LREAL := 0;
	
	fahrmodus : LREAL := 0;
	
	streckeX, streckeY, streckeTheta : LREAL := 0;
	
	Regeldiff : LREAL := 0;
	
	vX, vY, vTheta : LREAL := 0;
	
	vXCartesianToMotors 	AT%Q*:	LREAL:=0;
	vYCartesianToMotors 	AT%Q*:	LREAL:=0;
	vThetaCartesianToMotors AT%Q*:	LREAL:=0;
	
	testTheta : LREAL := 0;
	
	kp : LREAL := 0.01;
	ki : LREAL := 0.0001;
	ITherm : LREAL := 0;
	
	SollVelo: RobotPose;
	
	TimerLosfahren : TON;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
		
IF Main.Dummy <> 1 THEN	//Dummy soll nur Laufen, wenn Das auch eingestellt ist
 RETURN;
END_IF

IF Main.MyIstPose.y <> 0 THEN
istPosX := Main.MyIstPose.x;
istPosY := Main.MyIstPose.y;
istPosTheta := Main.MyIstPose.theta;
END_IF


sollPosX := Main.MySollPose.x;
sollPosY := Main.MySollPose.y;
sollPosTheta := Main.MySollPose.theta;
fahrmodus := Main.MySollPose.m;

IF	Main.MySollPose.y = 0 THEN
	sollPosX := istPosX;
	sollPosY := istPosY;
	sollPosTheta := istPosTheta;
END_IF

newSollPosTheta := absToDynTheta(absolutThetaSoll:=sollPosTheta, absolutThetaIst := istPosTheta);

streckeX := sollPosX*COS(istPosTheta) - istPosX*COS(istPosTheta) - istPosY*SIN(istPosTheta) + sollPosY*SIN(istPosTheta);
streckeY := sollPosY*COS(istPosTheta) - istPosY*COS(istPosTheta) + istPosX*SIN(istPosTheta) - sollPosX*SIN(istPosTheta);
streckeTheta := newSollPosTheta - istPosTheta;

vX := 100 * streckeX/(SQRT(streckex*streckex + streckey*streckey + 0.03578*streckeTheta*0.03578*streckeTheta)+0.01);
vY := 100 * streckeY/(SQRT(streckex*streckex + streckey*streckey + 0.03578*streckeTheta*0.03578*streckeTheta)+0.01);
vTheta := 100 * streckeTheta/(SQRT(streckex*streckex + streckey*streckey + 0.03578*streckeTheta*0.03578*streckeTheta)+0.01);

Regeldiff := SQRT((sollPosX-istPosX)*(sollPosX-istPosX) + (sollPosY-istPosY)*(sollPosY-istPosY) + 28*28*(newSollPosTheta-istPosTheta)*(newSollPosTheta-istPosTheta));



CASE LREAL_TO_INT(fahrmodus) OF
	4:
		SollVelo.x := vX * 2.5;
		SollVelo.y := vY * 2.5;
		SollVelo.theta := vTheta * 2.5;
		IF	 Regeldiff < 20 THEN
			 Main.updateSollPose(); 
		END_IF;
	3:
		SollVelo.x := vX * 1.5;
		SollVelo.y := vY * 1.5;
		SollVelo.theta := vTheta * 1.5;
		IF Regeldiff < 20 THEN
			 Main.updateSollPose();
		END_IF;

	2:
		SollVelo.x := vX * Regeldiff * kp;
		SollVelo.y := vY * Regeldiff * kp;
		SollVelo.theta := vTheta * Regeldiff * kp;
		IF Regeldiff < 3 THEN
			 Main.updateSollPose();
		END_IF;
			 
	1:
		SollVelo.x := 80;
		SollVelo.y := 0;
		SollVelo.theta :=0; 
		IF Gripper.slider = FALSE THEN
			SollVelo.x := 0;
			SollVelo.y := 0;
			SollVelo.theta :=0;
			Main.closeGripper();
			TimerLosfahren.IN := 1;
			
			IF TimerLosfahren.Q = 1 THEN
				Main.updateSollPose();
				TimerLosfahren.IN := 0;
			END_IF
		END_IF
	5:
		SollVelo.x := 80;
		SollVelo.y := 0;
		SollVelo.theta :=0; 
		IF Gripper.slider = FALSE THEN
			SollVelo.x := 0;
			SollVelo.y := 0;
			SollVelo.theta :=0;
			Main.openGripper();
			TimerLosfahren.IN := 1;
			
			IF TimerLosfahren.Q = 1 THEN
				Main.updateSollPose();
				TimerLosfahren.IN := 0;
			END_IF
		END_IF
ELSE
		SollVelo.x := 0;
		SollVelo.y := 0;
		SollVelo.theta := 0;
END_CASE;

Main.SetSollVelo(SollVelo);
TimerLosfahren(PT:= T#1S);

*)]]></ST>
    </Implementation>
    <Method Name="absToDynTheta" Id="{012fc75e-eecd-4686-a31b-09f830e4eb33}">
      <Declaration><![CDATA[METHOD absToDynTheta : LREAL
VAR_INPUT
	absolutThetaSoll : LREAL;
	absolutThetaIst : LREAL;
END_VAR

VAR_OUTPUT
	dynamicThetaSoll : LREAL;
END_VAR

VAR CONSTANT
	PI : LREAL := 3.1415;
END_VAR
VAR
	dTheta: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Konvertiert einen sollTheta Wert +Pi bis - PI in einen +2Pi bis - 2Pi abhängig von der Distanz.
	So dreht sich der Robitino immer zum Kürzeren Drehwinkel in richtung Sollwinkel *) 

dTheta := absolutThetaSoll - absolutThetaIst;

IF dTheta > PI  THEN
	absToDynTheta := absolutThetaSoll - 2*PI;
	
ELSIF dTheta < -PI THEN
	absToDynTheta := absolutThetaSoll + 2*PI;
	
ELSE
	absToDynTheta := absolutThetaSoll;
END_IF
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LIM" Id="{ee116892-d390-46c6-b6d4-2d417707ef92}">
      <Declaration><![CDATA[METHOD LIM : LREAL
VAR_INPUT
	Vcx : LREAL;
	Vcy: LREAL;
END_VAR

VAR_OUTPUT
	Lx: LREAL;
	Ly: LREAL;

END_VAR

VAR
	Limmax : LREAL := 1;
	Limmin : LREAL := 1; 
	limitx :LREAL;
	limity : LREAL; 
 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[limitx := LIMIT(Limmin,Vcx,Limmax);
limity := LIMIT(Limmin,Vcy,Limmax);

IF Vcx = limitx AND Vcy = limity THEN 
	Lx := Vcx;
	Ly := Vcy;
ELSIF Vcx <> limitx  THEN
	Lx := limitx;
	Ly := limity*(limitx/Vcx);
	
ELSIF Vcy <> limity THEN
	Lx :=  limitx*(limity/Vcy);
	Ly :=  limity;
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="sign" Id="{23898236-c1a3-4e9a-a0c0-67fb3485b1f5}">
      <Declaration><![CDATA[METHOD sign : INT
VAR_INPUT
	input : LREAL := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF input < 0 THEN
	sign := -1;
ELSIF input > 0 THEN
	sign := 1;
ELSE
	sign := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TestDummy">
      <LineId Id="3" Count="112" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TestDummy.absToDynTheta">
      <LineId Id="3" Count="13" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TestDummy.LIM">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TestDummy.sign">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>